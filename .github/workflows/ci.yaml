name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - develop
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn install

      - name: Run tests
        run: yarn test

      - name: Run Lint
        run: yarn lint

  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '20'

      - name: Install dependencies
        run: yarn install

      - name: Get Git Short Hash
        id: vars
        run: echo "GIT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Build and Push Docker image
        run: |
          docker build -t alfonsobalmori/myapp:${{ env.GIT_SHA }} .
          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          docker push alfonsobalmori/myapp:${{ env.GIT_SHA }}

      - name: Update deployment.yaml with new Docker image tag
        run: |
          sed -i 's/tag: ".*"/tag: "${{ env.GIT_SHA }}"/' manifest/deployment.yaml

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Get EKS Cluster Token
        id: eks-token
        run: echo "KUBE_TOKEN=$(aws eks get-token --cluster-name your-cluster-name --query 'status.token' --output text)" >> $GITHUB_ENV

      - name: Create kubeconfig file
        run: |
          mkdir -p $HOME/.kube
          echo "
          apiVersion: v1
          clusters:
          - cluster:
              server: <EKS_CLUSTER_ENDPOINT>
              certificate-authority-data: <EKS_CLUSTER_CERTIFICATE>
            name: eks-cluster
          contexts:
          - context:
              cluster: eks-cluster
              user: aws
            name: eks-context
          current-context: eks-context
          kind: Config
          preferences: {}
          users:
          - name: aws
            user:
              token: ${{ env.KUBE_TOKEN }}
          " > $HOME/.kube/config

      - name: Apply Kubernetes manifests
        run: kubectl apply -f manifest/

      - name: Bypass Husky
        run: git config core.hooksPath /dev/null

      - name: Commit and push changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add manifest/deployment.yaml
          git commit -m "Update deployment.yaml with new image tag ${{ github.sha }} [skip ci]"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
